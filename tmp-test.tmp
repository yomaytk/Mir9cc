extern void *stderr;
int one() { return 1; }
int two() { return 2; }
int plus(int x, int y) { return x + y; }
int mul(int x, int y) { return x * y; }
int add(int a, int b, int c, int d, int e, int f) { return a+b+c+d+e+f; }
int var1;
int var2[5];
extern int global_arr[1];
int *aaa;
typedef int myint;
int main() {
 do { int e1 = (0); int e2 = (0); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "0", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 35, "0", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (1); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "1", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 36, "1", e1, e2); exit(1); } } while (0);
 do { int e1 = (2); int e2 = (1+1); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "1+1", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 37, "1+1", e1, e2); exit(1); } } while (0);
 do { int e1 = (10); int e2 = (2*3+4); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "2*3+4", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 38, "2*3+4", e1, e2); exit(1); } } while (0);
 do { int e1 = (26); int e2 = (2*3+4*5); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "2*3+4*5", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 39, "2*3+4*5", e1, e2); exit(1); } } while (0);
 do { int e1 = (5); int e2 = (50/10); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "50/10", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 40, "50/10", e1, e2); exit(1); } } while (0);
 do { int e1 = (9); int e2 = (6*3/2); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "6*3/2", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 41, "6*3/2", e1, e2); exit(1); } } while (0);
 do { int e1 = (45); int e2 = ((2+3)*(4+5)); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "(2+3)*(4+5)", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 42, "(2+3)*(4+5)", e1, e2); exit(1); } } while (0);
 do { int e1 = (153); int e2 = (1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 43, "1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17", e1, e2); exit(1); } } while (0);
 do { int e1 = (2); int e2 = (({ int a=2; return a; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int a=2; return a; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 45, "({ int a=2; return a; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (10); int e2 = (({ int a=2; int b; b=3+2; return a*b; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int a=2; int b; b=3+2; return a*b; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 46, "({ int a=2; int b; b=3+2; return a*b; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (2); int e2 = (({ if (1) return 2; return 3; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ if (1) return 2; return 3; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 47, "({ if (1) return 2; return 3; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (3); int e2 = (({ if (0) return 2; return 3; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ if (0) return 2; return 3; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 48, "({ if (0) return 2; return 3; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (2); int e2 = (({ if (1) return 2; else return 3; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ if (1) return 2; else return 3; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 49, "({ if (1) return 2; else return 3; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (3); int e2 = (({ if (0) return 2; else return 3; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ if (0) return 2; else return 3; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 50, "({ if (0) return 2; else return 3; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (5); int e2 = (plus(2, 3)); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "plus(2, 3)", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 52, "plus(2, 3)", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (one()); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "one()", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 53, "one()", e1, e2); exit(1); } } while (0);
 do { int e1 = (3); int e2 = (one()+two()); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "one()+two()", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 54, "one()+two()", e1, e2); exit(1); } } while (0);
 do { int e1 = (6); int e2 = (mul(2, 3)); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "mul(2, 3)", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 55, "mul(2, 3)", e1, e2); exit(1); } } while (0);
 do { int e1 = (21); int e2 = (add(1,2,3,4,5,6)); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "add(1,2,3,4,5,6)", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 56, "add(1,2,3,4,5,6)", e1, e2); exit(1); } } while (0);
 do { int e1 = (0); int e2 = (0 || 0); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "0 || 0", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 58, "0 || 0", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (1 || 0); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "1 || 0", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 59, "1 || 0", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (0 || 1); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "0 || 1", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 60, "0 || 1", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (1 || 1); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "1 || 1", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 61, "1 || 1", e1, e2); exit(1); } } while (0);
 do { int e1 = (0); int e2 = (0 && 0); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "0 && 0", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 63, "0 && 0", e1, e2); exit(1); } } while (0);
 do { int e1 = (0); int e2 = (1 && 0); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "1 && 0", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 64, "1 && 0", e1, e2); exit(1); } } while (0);
 do { int e1 = (0); int e2 = (0 && 1); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "0 && 1", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 65, "0 && 1", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (1 && 1); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "1 && 1", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 66, "1 && 1", e1, e2); exit(1); } } while (0);
 do { int e1 = (0); int e2 = (0 < 0); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "0 < 0", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 68, "0 < 0", e1, e2); exit(1); } } while (0);
 do { int e1 = (0); int e2 = (1 < 0); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "1 < 0", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 69, "1 < 0", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (0 < 1); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "0 < 1", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 70, "0 < 1", e1, e2); exit(1); } } while (0);
 do { int e1 = (0); int e2 = (0 > 0); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "0 > 0", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 71, "0 > 0", e1, e2); exit(1); } } while (0);
 do { int e1 = (0); int e2 = (0 > 1); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "0 > 1", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 72, "0 > 1", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (1 > 0); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "1 > 0", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 73, "1 > 0", e1, e2); exit(1); } } while (0);
 do { int e1 = (0); int e2 = (4 == 5); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "4 == 5", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 75, "4 == 5", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (5 == 5); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "5 == 5", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 76, "5 == 5", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (4 != 5); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "4 != 5", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 77, "4 != 5", e1, e2); exit(1); } } while (0);
 do { int e1 = (0); int e2 = (5 != 5); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "5 != 5", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 78, "5 != 5", e1, e2); exit(1); } } while (0);
 do { int e1 = (45); int e2 = (({ int x=0; int y=0; do { y=y+x; x=x+1; } while (x < 10); return y; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int x=0; int y=0; do { y=y+x; x=x+1; } while (x < 10); return y; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 80, "({ int x=0; int y=0; do { y=y+x; x=x+1; } while (x < 10); return y; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (60); int e2 = (({ int sum=0; int i; for (i=10; i<15; i=i+1) sum = sum + i; return sum;})); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int sum=0; int i; for (i=10; i<15; i=i+1) sum = sum + i; return sum;})", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 82, "({ int sum=0; int i; for (i=10; i<15; i=i+1) sum = sum + i; return sum;})", e1, e2); exit(1); } } while (0);
 do { int e1 = (89); int e2 = (({ int i=1; int j=1; for (int k=0; k<10; k=k+1) { int m=i+j; i=j; j=m; } return i;})); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int i=1; int j=1; for (int k=0; k<10; k=k+1) { int m=i+j; i=j; j=m; } return i;})", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 83, "({ int i=1; int j=1; for (int k=0; k<10; k=k+1) { int m=i+j; i=j; j=m; } return i;})", e1, e2); exit(1); } } while (0);
 do { int e1 = (45); int e2 = (({ int i=0; int j=0; while (i<10) { j=j+i; i=i+1; } return j;})); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int i=0; int j=0; while (i<10) { j=j+i; i=i+1; } return j;})", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 85, "({ int i=0; int j=0; while (i<10) { j=j+i; i=i+1; } return j;})", e1, e2); exit(1); } } while (0);
 do { int e1 = (3); int e2 = (({ int ary[2]; *ary=1; *(ary+1)=2; return *ary + *(ary+1);})); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int ary[2]; *ary=1; *(ary+1)=2; return *ary + *(ary+1);})", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 87, "({ int ary[2]; *ary=1; *(ary+1)=2; return *ary + *(ary+1);})", e1, e2); exit(1); } } while (0);
 do { int e1 = (5); int e2 = (({ int x; int *p = &x; x = 5; return *p;})); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int x; int *p = &x; x = 5; return *p;})", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 88, "({ int x; int *p = &x; x = 5; return *p;})", e1, e2); exit(1); } } while (0);
 do { int e1 = (3); int e2 = (({ int ary[2]; ary[0]=1; ary[1]=2; return ary[0] + ary[0+1];})); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int ary[2]; ary[0]=1; ary[1]=2; return ary[0] + ary[0+1];})", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 90, "({ int ary[2]; ary[0]=1; ary[1]=2; return ary[0] + ary[0+1];})", e1, e2); exit(1); } } while (0);
 do { int e1 = (5); int e2 = (({ int x; int *p = &x; x = 5; return p[0];})); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int x; int *p = &x; x = 5; return p[0];})", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 91, "({ int x; int *p = &x; x = 5; return p[0];})", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (({ char x; return sizeof x; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ char x; return sizeof x; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 93, "({ char x; return sizeof x; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (4); int e2 = (({ int x; return sizeof(x); })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int x; return sizeof(x); })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 94, "({ int x; return sizeof(x); })", e1, e2); exit(1); } } while (0);
 do { int e1 = (8); int e2 = (({ int *x; return sizeof x; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int *x; return sizeof x; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 95, "({ int *x; return sizeof x; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (16); int e2 = (({ int x[4]; return sizeof x; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int x[4]; return sizeof x; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 96, "({ int x[4]; return sizeof x; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (10); int e2 = (({ int x = 10; aaa = &x; return *aaa; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int x = 10; aaa = &x; return *aaa; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 97, "({ int x = 10; aaa = &x; return *aaa; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (({ char x; return _Alignof x; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ char x; return _Alignof x; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 99, "({ char x; return _Alignof x; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (4); int e2 = (({ int x; return _Alignof(x); })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int x; return _Alignof(x); })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 100, "({ int x; return _Alignof(x); })", e1, e2); exit(1); } } while (0);
 do { int e1 = (8); int e2 = (({ int *x; return _Alignof x; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int *x; return _Alignof x; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 101, "({ int *x; return _Alignof x; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (4); int e2 = (({ int x[4]; return _Alignof x; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int x[4]; return _Alignof x; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 102, "({ int x[4]; return _Alignof x; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (8); int e2 = (({ int *x[4]; return _Alignof x; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int *x[4]; return _Alignof x; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 103, "({ int *x[4]; return _Alignof x; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (5); int e2 = (({ char x = 5; return x; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ char x = 5; return x; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 105, "({ char x = 5; return x; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (42); int e2 = (({ int x = 0; char *p = &x; p[0] = 42; return x; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int x = 0; char *p = &x; p[0] = 42; return x; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 106, "({ int x = 0; char *p = &x; p[0] = 42; return x; })", e1, e2); exit(1); } } while (0);
 do { int e1 = ('a'); int e2 = (({ char *p = "abc"; return p[0]; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ char *p = \"abc\"; return p[0]; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 108, "({ char *p = \"abc\"; return p[0]; })", e1, e2); exit(1); } } while (0);
 do { int e1 = ('b'); int e2 = (({ char *p = "abc"; return p[1]; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ char *p = \"abc\"; return p[1]; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 109, "({ char *p = \"abc\"; return p[1]; })", e1, e2); exit(1); } } while (0);
 do { int e1 = ('c'); int e2 = (({ char *p = "abc"; return p[2]; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ char *p = \"abc\"; return p[2]; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 110, "({ char *p = \"abc\"; return p[2]; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (0); int e2 = (({ char *p = "abc"; return p[3]; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ char *p = \"abc\"; return p[3]; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 111, "({ char *p = \"abc\"; return p[3]; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (({ int x = 1; { int x = 2; } return x; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int x = 1; { int x = 2; } return x; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 113, "({ int x = 1; { int x = 2; } return x; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (0); int e2 = (var1); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "var1", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 115, "var1", e1, e2); exit(1); } } while (0);
 do { int e1 = (5); int e2 = (({ var1 = 5; return var1; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ var1 = 5; return var1; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 116, "({ var1 = 5; return var1; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (20); int e2 = (sizeof(var2)); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "sizeof(var2)", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 117, "sizeof(var2)", e1, e2); exit(1); } } while (0);
 do { int e1 = (15); int e2 = (({ var2[0] = 5; var2[4] = 10; return var2[0] + var2[4]; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ var2[0] = 5; var2[4] = 10; return var2[0] + var2[4]; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 118, "({ var2[0] = 5; var2[4] = 10; return var2[0] + var2[4]; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (5); int e2 = (global_arr[0]); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "global_arr[0]", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 119, "global_arr[0]", e1, e2); exit(1); } } while (0);
 do { int e1 = (8); int e2 = (({ return 3 + ({ return 5; }); })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ return 3 + ({ return 5; }); })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 121, "({ return 3 + ({ return 5; }); })", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (({; return 1; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({; return 1; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 122, "({; return 1; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (4); int e2 = (({ struct { int a; } x; return sizeof(x); })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ struct { int a; } x; return sizeof(x); })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 124, "({ struct { int a; } x; return sizeof(x); })", e1, e2); exit(1); } } while (0);
 do { int e1 = (8); int e2 = (({ struct { char a; int b; } x; return sizeof(x); })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ struct { char a; int b; } x; return sizeof(x); })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 125, "({ struct { char a; int b; } x; return sizeof(x); })", e1, e2); exit(1); } } while (0);
 do { int e1 = (12); int e2 = (({ struct { char a; char b; int c; char d; } x; return sizeof(x); })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ struct { char a; char b; int c; char d; } x; return sizeof(x); })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 126, "({ struct { char a; char b; int c; char d; } x; return sizeof(x); })", e1, e2); exit(1); } } while (0);
 do { int e1 = (3); int e2 = (({ struct { int a; } x; x.a=3; return x.a; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ struct { int a; } x; x.a=3; return x.a; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 127, "({ struct { int a; } x; x.a=3; return x.a; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (8); int e2 = (({ struct { char a; int b; } x; x.a=3; x.b=5; return x.a+x.b; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ struct { char a; int b; } x; x.a=3; x.b=5; return x.a+x.b; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 128, "({ struct { char a; int b; } x; x.a=3; x.b=5; return x.a+x.b; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (8); int e2 = (({ struct tag { char a; int b; } x; struct tag *p = &x; x.a=3; x.b=5; return p->a+p->b; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ struct tag { char a; int b; } x; struct tag *p = &x; x.a=3; x.b=5; return p->a+p->b; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 129, "({ struct tag { char a; int b; } x; struct tag *p = &x; x.a=3; x.b=5; return p->a+p->b; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (48); int e2 = (({ struct { struct { int b; int c[5]; } a[2]; } x; return sizeof(x); })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ struct { struct { int b; int c[5]; } a[2]; } x; return sizeof(x); })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 131, "({ struct { struct { int b; int c[5]; } a[2]; } x; return sizeof(x); })", e1, e2); exit(1); } } while (0);
 do { int e1 = (8); int e2 = (({ struct { struct { int b; int c[5]; } a[2]; } x; x.a[0].b = 3; x.a[0].c[1] = 5; return x.a[0].b + x.a[0].c[1]; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ struct { struct { int b; int c[5]; } a[2]; } x; x.a[0].b = 3; x.a[0].c[1] = 5; return x.a[0].b + x.a[0].c[1]; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 143, "({ struct { struct { int b; int c[5]; } a[2]; } x; x.a[0].b = 3; x.a[0].c[1] = 5; return x.a[0].b + x.a[0].c[1]; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (3); int e2 = (({ typedef int foo; foo x = 3; return x; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ typedef int foo; foo x = 3; return x; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 145, "({ typedef int foo; foo x = 3; return x; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (8); int e2 = (({ typedef struct { struct { int b; int c[5]; } a[2]; } t1; t1 x; x.a[0].b = 3; x.a[0].c[1] = 5; return x.a[0].b + x.a[0].c[1]; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ typedef struct { struct { int b; int c[5]; } a[2]; } t1; t1 x; x.a[0].b = 3; x.a[0].c[1] = 5; return x.a[0].b + x.a[0].c[1]; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 157, "({ typedef struct { struct { int b; int c[5]; } a[2]; } t1; t1 x; x.a[0].b = 3; x.a[0].c[1] = 5; return x.a[0].b + x.a[0].c[1]; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (0); int e2 = (!1); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "!1", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 159, "!1", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (!0); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "!0", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 160, "!0", e1, e2); exit(1); } } while (0);
 do { int e1 = (5); int e2 = (0 ? 3 : 5); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "0 ? 3 : 5", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 162, "0 ? 3 : 5", e1, e2); exit(1); } } while (0);
 do { int e1 = (3); int e2 = (1 ? 3 : 5); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "1 ? 3 : 5", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 163, "1 ? 3 : 5", e1, e2); exit(1); } } while (0);
 do { int e1 = (3); int e2 = ((1, 2, 3)); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "(1, 2, 3)", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 165, "(1, 2, 3)", e1, e2); exit(1); } } while (0);
 do { int e1 = (11); int e2 = (9 | 2); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "9 | 2", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 167, "9 | 2", e1, e2); exit(1); } } while (0);
 do { int e1 = (11); int e2 = (9 | 3); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "9 | 3", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 168, "9 | 3", e1, e2); exit(1); } } while (0);
 do { int e1 = (5); int e2 = (6 ^ 3); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "6 ^ 3", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 170, "6 ^ 3", e1, e2); exit(1); } } while (0);
 do { int e1 = (2); int e2 = (6 & 3); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "6 & 3", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 172, "6 & 3", e1, e2); exit(1); } } while (0);
 do { int e1 = (0); int e2 = (6 & 0); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "6 & 0", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 173, "6 & 0", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (4 <= 5); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "4 <= 5", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 175, "4 <= 5", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (5 <= 5); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "5 <= 5", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 176, "5 <= 5", e1, e2); exit(1); } } while (0);
 do { int e1 = (0); int e2 = (6 <= 5); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "6 <= 5", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 177, "6 <= 5", e1, e2); exit(1); } } while (0);
 do { int e1 = (0); int e2 = (4 >= 5); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "4 >= 5", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 179, "4 >= 5", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (5 >= 5); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "5 >= 5", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 180, "5 >= 5", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (6 >= 5); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "6 >= 5", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 181, "6 >= 5", e1, e2); exit(1); } } while (0);
 do { int e1 = (8); int e2 = (1 << 3); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "1 << 3", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 183, "1 << 3", e1, e2); exit(1); } } while (0);
 do { int e1 = (4); int e2 = (16 >> 2); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "16 >> 2", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 184, "16 >> 2", e1, e2); exit(1); } } while (0);
 do { int e1 = (4); int e2 = (19 % 5); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "19 % 5", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 186, "19 % 5", e1, e2); exit(1); } } while (0);
 do { int e1 = (0); int e2 = (9 % 3); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "9 % 3", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 187, "9 % 3", e1, e2); exit(1); } } while (0);
 do { int e1 = (0-3); int e2 = (-3); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "-3", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 189, "-3", e1, e2); exit(1); } } while (0);
 do { int e1 = (3); int e2 = (({ int i = 3; return i++; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int i = 3; return i++; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 191, "({ int i = 3; return i++; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (4); int e2 = (({ int i = 3; return ++i; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int i = 3; return ++i; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 192, "({ int i = 3; return ++i; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (3); int e2 = (({ int i = 3; return i--; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int i = 3; return i--; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 193, "({ int i = 3; return i--; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (2); int e2 = (({ int i = 3; return --i; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ int i = 3; return --i; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 194, "({ int i = 3; return --i; })", e1, e2); exit(1); } } while (0);
 do { int e1 = (4); int e2 = (({ myint foo = 3; return sizeof(foo); })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ myint foo = 3; return sizeof(foo); })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 196, "({ myint foo = 3; return sizeof(foo); })", e1, e2); exit(1); } } while (0);
 do { int e1 = (1); int e2 = (({ typedef struct foo_ foo; return 1; })); if (e1 == e2) { fprintf(stderr, "%s => %d\n", "({ typedef struct foo_ foo; return 1; })", e2); } else { fprintf(stderr, "%d: %s: %d expected, but got %d\n", 198, "({ typedef struct foo_ foo; return 1; })", e1, e2); exit(1); } } while (0);
return 0;
}
